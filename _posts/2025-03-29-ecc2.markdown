---
layout: post
title:  "ECC 개발블로그 2일차"
date:   2025-03-29 14:04:29 +0900
categories: ECC
---


# Chapter03 연산자

## 03-1 연산자와 연산식

연산자: 연산의 종류를 결정짓는 기호. 연산자의 종류는 산술(`+`, `-`, `*`, `/`, `%`), 증감(`++`, `--`), 비교(`==`, `!=`), 논리(`&&`, `||`), 대입(`=`, `+=`, `-=`) 등이 있습니다.

**연산의 방향과 우선순위**

1. 단항, 이항, 삼항 연산자 순으로 우선순위를 가진다  
2. 산술, 비교, 논리, 대입 연산자 순으로 우선순위를 가진다  
3. 단항, 부호, 대입 연산자를 제외한 모든 연산의 방향은 왼쪽에서 오른쪽  

---

## 03-2 연산자의 종류

### **부호연산자(`+`, `-`)**

- 양수 및 음수를 표시하는 연산자입니다.
- 주의할 점: 부호 연산자의 결과는 `int` 타입입니다.

잘못된 코드:
```java
byte b = 100;
byte result = -b;  // 컴파일 오류 발생
```

올바른 코드:
```java
package sec02.exam01;

public class SignOperatorExample {
    public static void main(String[] args) {
        int x = -100;

        int result1 = +x;
        int result2 = -x;

        System.out.println("result1 = " + result1);
        System.out.println("result2 = " + result2);

        byte b = 100;
        // byte result3 = -b;  // 컴파일 에러
        int result3 = -b;
        System.out.println("result3 = " + result3);
    }
}
```

---

### **증감 연산자(`++`, `--`)**

- 변수 앞에 붙이면 먼저 증가/감소 후 사용
- 변수 뒤에 붙이면 사용 후 증가/감소

```java
package sec02.exam02;

public class IncreaseDecreaseOperatorExample {
    public static void main(String[] args) {
        int x = 10;
        int y = 10;
        int z;

        System.out.println("-----------------------");
        x++;
        ++x;
        System.out.println("x = " + x);

        System.out.println("-----------------------");
        y--;
        --y;
        System.out.println("y = " + y);

        System.out.println("-----------------------");
        z = x++;
        System.out.println("z = " + z);
        System.out.println("x = " + x);

        System.out.println("-----------------------");
        z = ++x;
        System.out.println("z = " + z);
        System.out.println("x = " + x);

        System.out.println("-----------------------");
        z = ++x + y++;
        System.out.println("z = " + z);
        System.out.println("x = " + x);
        System.out.println("y = " + y);
    }
}
```

```java
// z = ++x + y++; 와 동일한 표현
++x;
z = x + y;
y++;
```

---

### **논리 부정 연산자(`!`)**

- `true` → `false`, `false` → `true`
- `boolean` 타입에만 사용 가능

```java
package sec02.exam03;

public class DenyLogicOperatorExample {
    public static void main(String[] args) {
        boolean play = true;
        System.out.println(play);

        play = !play;
        System.out.println(play);

        play = !play;
        System.out.println(play);
    }
}
```

**실행결과:**
```
true
false
true
```


---

### **산술 연산자(`+`, `-`, `*`, `/`, `%`)**

- 피연산자 타입이 다를 경우 다음 규칙으로 변환 후 연산
  1. `byte`, `short`, `char` → `int`로 변환
  2. `long` 포함 시 → 모두 `long`으로 변환
  3. 실수 포함 시 → 더 큰 실수 타입으로 변환

```java
package sec02.exam04;

public class ArithmeticOperatorExample {
    public static void main(String[] args) {
        int v1 = 5;
        int v2 = 2;

        int result1 = v1 + v2;
        System.out.println("result1 = " + result1);

        int result2 = v1 - v2;
        System.out.println("result2 = " + result2);

        int result3 = v1 * v2;
        System.out.println("result3 = " + result3);

        int result4 = v1 / v2;
        System.out.println("result4 = " + result4);

        int result5 = v1 % v2;
        System.out.println("result5 = " + result5);

        double result6 = (double) v1 / v2;
        System.out.println("result6 = " + result6);
    }
}
```

**참고:** `char` 타입도 정수이므로 산술 연산 가능하나, 연산 결과는 `int` 타입이 됨.

```java
package sec02.exam05;

public class CharOperationExample {
    public static void main(String[] args) {
        char c1 = 'A' + 1;
        char c2 = 'A';
        // char c3 = c2 + 1; // 컴파일 에러
        System.out.println("c1: " + c1);
        System.out.println("c2: " + c2);
    }
}
```

---

### **문자열 결합 연산자(`+`)**

- 문자열 + 다른 타입 → 문자열로 변환 후 결합됨

```java
package sec02.exam06;

public class StringConcatExample {
    public static void main(String[] args) {
        String str1 = "JDK" + 6.0;
        String str2 = str1 + " 특징";
        System.out.println(str2);

        String str3 = "JDK" + 3 + 3.0;
        String str4 = 3 + 3.0 + "JDK";
        System.out.println(str3);
        System.out.println(str4);
    }
}
```

**실행결과**
```
JDK6.0 특징
JDK33.0
6.0JDK
```
---

### **비교 연산자 (`==`, `!=`, `<`, `<=`, `>`, `>=`)**

- 주로 조건문(if), 반복문(for, while)에서 사용
- `char` 타입 피연산자는 유니코드 값으로 비교됨 (`'A' < 'B'` → `65 < 66`)

```java
package sec02.exam07;

public class CompareOperatorExample1 {
    public static void main(String[] args) {
        int num1 = 10;
        int num2 = 10;
        boolean result1 = (num1 == num2);
        boolean result2 = (num1 != num2);
        boolean result3 = (num1 <= num2);
        System.out.println("result1 = " + result1);
        System.out.println("result2 = " + result2);
        System.out.println("result3 = " + result3);

        char char1 = 'A';
        char char2 = 'B';
        boolean result4 = (char1 < char2);
        System.out.println("result4 = " + result4);
    }
}
```

```java
package sec02.exam08;

public class CompareOperatorExample2 {
    public static void main(String[] args) {
        int v2 = 1;
        double v3 = 1.0;
        System.out.println(v2 == v3); // true

        double v4 = 0.1;
        float v5 = 0.1f;
        System.out.println(v4 == v5); // false
        System.out.println((float)v4 == v5); // true
        System.out.println((int)(v4*10) == (int)(v5*10)); // true
    }
}
```

---

### **논리 연산자 (`&&`, `||`, `!`, `&`, `|`)**

- 조건을 조합할 때 사용
- `&`, `|`는 양쪽 모두 검사 / `&&`, `||`는 앞이 false/true면 뒤 생략

```java
package sec02.exam09;

public class LogicalOperatorExample {
    public static void main(String[] args) {
        int charCode = 'A';

        if ((charCode >= 65) & (charCode <= 90)) {
            System.out.println("대문자 이군요");
        }

        if ((charCode >= 97) && (charCode <= 122)) {
            System.out.println("소문자 이군요");
        }

        if (!(charCode < 48) && !(charCode > 57)) {
            System.out.println("0~9 숫자 이군요");
        }

        int value = 6;

        if ((value % 2 == 0) | (value % 3 == 0)) {
            System.out.println("2 또는 3의 배수 이군요");
        }

        if ((value % 2 == 0) || (value % 3 == 0)) {
            System.out.println("2 또는 3의 배수 이군요");
        }
    }
}
```

---

### **대입 연산자 (`=`, `+=`, `-=`, `*=`, `/=`, `%=`)**

```java
package sec02.exam10;

public class AssignmentOperatorExample {
    public static void main(String[] args) {
        int result = 0;
        result += 10;
        System.out.println("result = " + result);
        result -= 5;
        System.out.println("result = " + result);
        result *= 3;
        System.out.println("result = " + result);
        result /= 5;
        System.out.println("result = " + result);
        result %= 3;
        System.out.println("result = " + result);
    }
}
```

---

### **삼항 연산자 (`조건 ? 참 : 거짓`)**

```java
package sec02.exam11;

public class ConditionalOperationExample {
    public static void main(String[] args) {
        int score = 85;
        char grade = (score > 90) ? 'A' : ((score > 80) ? 'B' : 'C');
        System.out.println(score + "점은 " + grade + "등급입니다.");
    }
}
```

---

# Chapter 04 조건문과 반복문

## 04-1 조건문: if문, switch문

### **if문**

```java
package sec01.exam01;

public class IfExample {
    public static void main(String[] args) {
        int score = 93;

        if (score >= 90) {
            System.out.println("점수가 90보다 큽니다.");
            System.out.println("등급은 A 입니다.");
        }

        if (score < 90) {
            System.out.println("점수가 90보다 작습니다.");
            System.out.println("등급은 B 입니다.");
        }
    }
}
```

---

### **if-else문**

```java
package sec01.exam02;

public class IfElseExample {
    public static void main(String[] args) {
        int score = 85;

        if (score >= 90) {
            System.out.println("점수가 90보다 큽니다.");
            System.out.println("등급은 A 입니다.");
        } else {
            System.out.println("점수가 90보다 작습니다.");
            System.out.println("등급은 B 입니다.");
        }
    }
}
```
---

### **if - else if - else 문**

```java
package sec01.exam03;

public class IfElseIfElseExample {
    public static void main(String[] args) {
        int score = 75;

        if (score >= 90) {
            System.out.println("점수가 100~90 입니다.");
            System.out.println("등급은 A 입니다.");
        } else if (score >= 80) {
            System.out.println("점수가 80~89 입니다.");
            System.out.println("등급은 B 입니다.");
        } else if (score >= 70) {
            System.out.println("점수가 70~79 입니다.");
            System.out.println("등급은 C 입니다.");
        } else {
            System.out.println("점수가 70 미만 입니다.");
            System.out.println("등급은 D 입니다.");
        }
    }
}
```

---

### **Math.random 사용법 요약**

- `Math.random()`은 `0.0 <= 값 < 1.0` 범위의 `double` 타입 난수 반환
- 1~10 사이의 정수 생성:
```java
int num = (int)(Math.random() * 10) + 1;
```
- 특정 범위 (start부터 시작하는 n개 정수):
```java
int num = (int)(Math.random() * n) + start;
```

---

### **주사위 예제 (if문 사용)**

```java
package sec01.exam04;

public class IfDiceExample {
    public static void main(String[] args) {
        int num = (int)(Math.random() * 6) + 1;

        if (num == 1) {
            System.out.println("1번이 나왔습니다.");
        } else if (num == 2) {
            System.out.println("2번이 나왔습니다.");
        } else if (num == 3) {
            System.out.println("3번이 나왔습니다.");
        } else if (num == 4) {
            System.out.println("4번이 나왔습니다.");
        } else if (num == 5) {
            System.out.println("5번이 나왔습니다.");
        } else {
            System.out.println("6번이 나왔습니다.");
        }
    }
}
```

**실행결과**
```
4번이 나왔습니다.
```

---

### **switch 문**

```java
package sec01.exam05;

public class SwitchExample {
    public static void main(String[] args) {
        int num = (int)(Math.random() * 6) + 1;

        switch (num) {
            case 1:
                System.out.println("1번이 나왔습니다.");
                break;
            case 2:
                System.out.println("2번이 나왔습니다.");
                break;
            case 3:
                System.out.println("3번이 나왔습니다.");
                break;
            case 4:
                System.out.println("4번이 나왔습니다.");
                break;
            case 5:
                System.out.println("5번이 나왔습니다.");
                break;
            default:
                System.out.println("6번이 나왔습니다.");
                break;
        }
    }
}
```

---

### **switch에서 break 생략 시 흐름**

```java
package sec01.exam06;

public class SwitchNoBreakCaseExample {
    public static void main(String[] args) {
        int time = (int)(Math.random() * 4) + 8;
        System.out.println("[현재시간: " + time + " 시]");

        switch (time) {
            case 8:
                System.out.println("출근합니다.");
            case 9:
                System.out.println("회의를 합니다.");
            case 10:
                System.out.println("업무를 봅니다.");
            default:
                System.out.println("외근을 나갑니다.");
        }
    }
}
```

**실행결과**
```
[현재시간:9 시]
회의를 합니다.
업무를 봅니다.
외근을 나갑니다.
```

---

### **switch - char 타입**

```java
package sec01.exam07;

public class SwitchCharExample {
    public static void main(String[] args) {
        char grade = 'B';

        switch (grade) {
            case 'A':
            case 'a':
                System.out.println("우수 회원입니다.");
                break;
            case 'B':
            case 'b':
                System.out.println("일반 회원입니다.");
                break;
            default:
                System.out.println("손님입니다.");
        }
    }
}
```

---

### **switch - String 타입**

```java
package sec01.exam08;

public class SwitchStringExample {
    public static void main(String[] args) {
        String position = "과장";

        switch (position) {
            case "부장":
                System.out.println("700만원");
                break;
            case "과장":
                System.out.println("500만원");
                break;
            default:
                System.out.println("300만원");
        }
    }
}
```

---

## 04-2 반복문: for문

```java
int sum = 0;
sum = sum + 2;
sum = sum + 3;
sum = sum + 4;
sum = sum + 5;
System.out.print("2~5의 합: " + sum);
```

→ 위의 코드를 for문으로 간단히 줄일 수 있음:

```java
int sum = 0;
for (int i = 2; i <= 5; i++) {
    sum += i;
}
System.out.print("2~5의 합: " + sum);
```

---

### **1부터 10까지 출력**

```java
package sec02.exam01;

public class ForPrintFrom1To10Example {
    public static void main(String[] args) {
        for (int i = 1; i <= 10; i++) {
            System.out.println(i);
        }
    }
}
```

**실행결과**
```
1
2
3
4
5
6
7
8
9
10
```

---

### **1부터 100까지 합 구하기**

```java
package sec02.exam02;

public class ForSumFrom1To100Example1 {
    public static void main(String[] args) {
        int sum = 0;

        for (int i = 1; i <= 100; i++) {
            sum += i;
        }

        System.out.println("1~100 합: " + sum);
    }
}
```

```java
package sec02.exam03;

public class ForSumFrom1To100Example2 {
    public static void main(String[] args) {
        int sum = 0;
        int i = 0;

        for (i = 1; i <= 100; i++) {
            sum += i;
        }

        System.out.println("1~" + (i - 1) + " 합: " + sum);
    }
}
```

---

### **for문에서 float 타입 주의**

```java
package sec02.exam04;

public class ForFloatCounterExample {
    public static void main(String[] args) {
        for (float x = 0.1f; x <= 1.0f; x += 0.1f) {
            System.out.println(x);
        }
    }
}
```

**실행결과**
```
0.1
0.2
0.3
0.4
0.5
0.6
0.70000005
0.800001
0.9000001
```

※ `float` 타입은 부동소수점 표현 오류가 있기 때문에 반복 제어 변수로 사용하면 정밀도 손실이 발생할 수 있음.
---

### **중첩 for문**

```java
package sec02.exam05;

public class ForMultiplicationTableExample {
    public static void main(String[] args) {
        for (int m = 2; m <= 9; m++) {
            System.out.println("*** " + m + "단 ***");
            for (int n = 1; n <= 9; n++) {
                System.out.println(m + " x " + n + " = " + (m * n));
            }
        }
    }
}
```

---

### **while 문**

```java
package sec02.exam06;

public class WhilePrintFrom1To10Example {
    public static void main(String[] args) {
        int i = 1;
        while (i <= 10) {
            System.out.println(i);
            i++;
        }
    }
}
```

---

### **while로 1부터 100까지 합 계산**

```java
package sec02.exam07;

public class WhileSumForm1To100Example {
    public static void main(String[] args) {
        int sum = 0;
        int i = 1;

        while (i <= 100) {
            sum += i;
            i++;
        }

        System.out.println("1~" + (i - 1) + " 합: " + sum);
    }
}
```

---

### **do-while 문**

- do 블록을 먼저 실행한 후, 조건을 검사하여 반복 여부 결정

---

### **break 문**

```java
package sec02.exam08;

public class BreakExample {
    public static void main(String[] args) throws Exception {
        while (true) {
            int num = (int)(Math.random() * 6) + 1;
            System.out.println(num);
            if (num == 6) {
                break;
            }
        }
        System.out.println("프로그램 종료");
    }
}
```

---

### **중첩 반복문 탈출 (라벨 사용)**

```java
package sec02.exam09;

public class BreakOutterExample {
    public static void main(String[] args) throws Exception {
        Outter:
        for (char upper = 'A'; upper <= 'Z'; upper++) {
            for (char lower = 'a'; lower <= 'z'; lower++) {
                System.out.println(upper + "-" + lower);
                if (lower == 'g') {
                    break Outter;
                }
            }
        }
        System.out.println("프로그램 실행 종료");
    }
}
```

---

### **continue 문**

```java
package sec02.exam10;

public class ContinueExample {
    public static void main(String[] args) throws Exception {
        for (int i = 1; i <= 10; i++) {
            if (i % 2 != 0) {
                continue;
            }
            System.out.println(i);
        }
    }
}
```

**실행결과**
```
2
4
6
8
10
```

---

# Chapter 05 참조타입

## 05-01 참조타입과 참조변수

| 기본 타입 |     | 참조 타입  |
|-----------|-----|-------------|
| 정수 타입 |     | 배열 타입   |
| 실수 타입 |     | 열거 타입   |
| 논리 타입 |     | 클래스     |
|           |     | 인터페이스 |

---

### **기본 타입 vs 참조 타입**

- 기본 타입: 실제 값을 변수에 저장
- 참조 타입: 객체의 메모리 주소(참조값)를 변수에 저장
- 참조 타입은 객체를 간접적으로 참조

---

### **메모리 사용 영역**

- 메소드 영역: 클래스 코드, static 필드 저장
- 힙 영역: 객체와 배열이 저장됨 (new 연산자로 생성)
- 스택 영역: 메소드 호출 시 생성되는 프레임, 지역 변수 등 저장

---

### **참조 변수의 ==, != 연산**

- 기본 타입: 값 자체 비교
- 참조 타입: 참조(주소) 비교

---

### **null 과 NullPointerException**

```java
int[] intArray = null;
intArray[0] = 10; // NullPointerException 발생
```

---

### **String 타입과 문자열 비교**

```java
String name1 = new String("신용권");
String name2 = new String("신용권");
```

```java
package sec01.exam01;

public class StringEqualsExample {
    public static void main(String[] args) {
        String strVar1 = "신민철";
        String strVar2 = "신민철";

        if (strVar1 == strVar2) {
            System.out.println("strVar1과 strVar2는 참조가 같음");
        } else {
            System.out.println("strVar1과 strVar2는 참조가 다름");
        }

        if (strVar1.equals(strVar2)) {
            System.out.println("strVar1과 strVar2는 문자열이 같음");
        }

        String strVar3 = new String("신민철");
        String strVar4 = new String("신민철");

        if (strVar3 == strVar4) {
            System.out.println("strVar3과 strVar4는 참조가 같음");
        } else {
            System.out.println("strVar3과 strVar4는 참조가 다름");
        }

        if (strVar3.equals(strVar4)) {
            System.out.println("strVar3과 strVar4는 문자열이 같음");
        }
    }
}
```

**실행결과**
```
strVar1과 strVar2는 참조가 같음
strVar1과 strVar2는 문자열이 같음
strVar3과 strVar4는 참조가 다름
strVar3과 strVar4는 문자열이 같음
```