---
layout: post
title:  "ECC 개발블로그 4일차"
date:   2025-05-03
categories: ECC
---

# Chapter 06-02 필드

## 필드란?

- 객체의 고유 데이터를 의미하며, 객체가 가져야 할 부품 혹은 객체의 현재 상태 데이터를 저장함

---

## 필드 선언

- 클래스의 중괄호 블록 내에서는 어디서든 선언 가능
- **단**, 생성자나 메소드의 중괄호 블록 내부에서는 선언 불가
- 생성자 안에서 선언된 변수는 **로컬 변수(local variable)** 가 됨

---

## 필드 사용

- **클래스 내부**: 생성자나 메소드에서 필드 이름만으로 접근 가능  
- **클래스 외부**: 객체를 생성한 뒤 `객체명.필드명`으로 접근해야 함

---

## 예제: 필드 선언 및 사용

### Car 클래스 정의

```java
package sec02.exam01;

public class Car {
	// 필드
	String company = "현대자동차";
	String model = "그랜저";
	String color = "검정";
	int maxSpeed = 350;
	int speed; // 초기값 미지정 → 기본값 0
}
```

### CarExample 클래스

```java
package sec02.exam01;

public class CarExample {
	public static void main(String[] args) {
		// 객체 생성
		Car myCar = new Car();
		
		// 필드 값 읽기
		System.out.println("제작회사: " + myCar.company);
		System.out.println("모델명: " + myCar.model);
		System.out.println("색깔: " + myCar.color);
		System.out.println("최고속도: " + myCar.maxSpeed);
		System.out.println("현재속도: " + myCar.speed);
		
		// 필드 값 변경
		myCar.speed = 60;
		System.out.println("수정된 속도: " + myCar.speed);
	}
}
```

### FieldInitValue 클래스

```java
package sec02.exam02;

public class FieldInitValue {
	// 필드 선언만 하고 초기화는 하지 않음
	byte byteField;
	short shortField;
	int intField;
	long longField;
	
	boolean booleanField;
	char charField;	
	
	float floatField;
	double doubleField;
	
	int[]  arrField;
	String referenceField;	
}
```

### FieldInitValueExample 클래스

```java
package sec02.exam02;

public class FieldInitValueExample {
	public static void main(String[] args) {	
		FieldInitValue fiv = new FieldInitValue();
		
		System.out.println("byteField: " + fiv.byteField);
		System.out.println("shortField: " + fiv.shortField);
		System.out.println("intField: " + fiv.intField);
		System.out.println("longField: " + fiv.longField);		
		System.out.println("booleanField: " + fiv.booleanField);
		System.out.println("charField: " + fiv.charField);		
		System.out.println("floatField: " + fiv.floatField);
		System.out.println("doubleField: " + fiv.doubleField);		
		System.out.println("arrField: " + fiv.arrField);
		System.out.println("referenceField: " + fiv.referenceField);
	}
}
```

> 위 예제처럼 초기값을 명시하지 않아도 자동으로 설정되는 기본값들을 확인할 수 있음.

---

# Chapter 06-3 생성자

**생성자**
- new 연산자로 클래스로부터 객체를 생성할 때 호출되어 객체의 초기화 담당
- 기본 생성자: 클래스 선언 시 컴파일러에 의해 자동 추가되는 생성자
- 매개변수: 생성자 호출 시 값을 전달받기 위해 선언되는 변수

```java
package sec03.exam01;

public class Car {
	//생성자
	Car(String color, int cc) {
	}
}

```
```java
package sec03.exam01;

public class CarExample {
	public static void main(String[] args) {
		Car myCar = new Car("검정", 3000);
		//Car myCar = new Car();  기본 생성자를 호출할 수 없음
	}
}
```

**필드 초기화**

```java
package sec03.exam02;

public class Korean {
	//필드
	String nation = "대한민국";
	String name;
	String ssn;

	//생성자
	public Korean(String n, String s) {
	  name = n;
	  ssn = s;
	}
	
	/*public Korean(String name, String ssn) {
	  this.name = name;
	  this.ssn = ssn;
	}*/
}

```

```java
package sec03.exam02;

public class KoreanExample {
	public static void main(String[] args) {
		Korean k1 = new Korean("박자바", "011225-1234567");
		System.out.println("k1.name : " + k1.name);
		System.out.println("k1.ssn : " + k1.ssn);
		
		Korean k2 = new Korean("김자바", "930525-0654321");
		System.out.println("k2.name : " + k2.name);
		System.out.println("k2.ssn : " + k2.ssn);
	}
}

```

- 매개 변수의 이름이 너무 짧음 코드의 가독성이 좋지 않다
- 매개변수는 초기화시킬 필드 이름과 비슷하거나 동일한 이름을 사용하는 것이 좋다


**this()**
- 객체 자신의 또 다른 생성자를 호출할 떄 사용한다


**생성자 오버로딩**
- 오버로딩이란 매개 변수를 달리하는 생성자를 여러 개 선언하는 것을 말한다

```java
package sec03.exam03;

public class Car {
	//필드
	String company = "현대자동차";
	String model;
	String color;
	int maxSpeed;
	
	//생성자
	Car() {
	}
	
	Car(String model) {
		this.model = model;
	}
	
	Car(String model, String color) {
		this.model = model;
		this.color = color;
	}
	
	Car(String model, String color, int maxSpeed) {
		this.model = model;
		this.color = color;
		this.maxSpeed = maxSpeed;
	}
}
```
```java
package sec03.exam03;

public class CarExample {
	public static void main(String[] args) {
		Car car1 = new Car();
		System.out.println("car1.company : " + car1.company);
		System.out.println();
		
		Car car2 = new Car("자가용");
		System.out.println("car2.company : " + car2.company);
		System.out.println("car2.model : " + car2.model);
		System.out.println();
		
		Car car3 = new Car("자가용", "빨강");
		System.out.println("car3.company : " + car3.company);
		System.out.println("car3.model : " + car3.model);
		System.out.println("car3.color : " + car3.color);
		System.out.println();
		
		Car car4 = new Car("택시", "검정", 200);
		System.out.println("car4.company : " + car4.company);
		System.out.println("car4.model : " + car4.model);
		System.out.println("car4.color : " + car4.color);
		System.out.println("car4.maxSpeed : " + car4.maxSpeed);
	}
}

```
**다른 생성자 호출: this()**
-this()를 사용하여 중복 코드 최소화

```java
package sec03.exam04;

public class Car {
	//필드
	String company = "현대자동차";
	String model;
	String color;
	int maxSpeed;
	
	//생성자
	Car() {
	}
	
	Car(String model) {
		this(model, null, 0);
	}
	
	Car(String model, String color) {
		this(model, color, 0);
	}
	
	Car(String model, String color, int maxSpeed) {
		this.model = model;
		this.color = color;
		this.maxSpeed = maxSpeed;
	}
}

```

```java
package sec03.exam04;

public class CarExample {
	public static void main(String[] args) {
		Car car1 = new Car();
		System.out.println("car1.company : " + car1.company);
		System.out.println();
		
		Car car2 = new Car("자가용");
		System.out.println("car2.company : " + car2.company);
		System.out.println("car2.model : " + car2.model);
		System.out.println();
		
		Car car3 = new Car("자가용", "빨강");
		System.out.println("car3.company : " + car3.company);
		System.out.println("car3.model : " + car3.model);
		System.out.println("car3.color : " + car3.color);
		System.out.println();
		
		Car car4 = new Car("택시", "검정", 200);
		System.out.println("car4.company : " + car4.company);
		System.out.println("car4.model : " + car4.model);
		System.out.println("car4.color : " + car4.color);
		System.out.println("car4.maxSpeed : " + car4.maxSpeed);
	}
}

```

# Chapter 06-4 메소드

리턴 타입: 메소드가 리턴하는 결과의 타입을 표시한다
메소드 이름: 메소드의 기능이 드라나도록 식별자 규칙에 맞게 이름을 지어준다
매개 변수 선언: 메소도를 실행할 때 필요한 데이터를 받기 위한 변수를 선언한다
메소드를 실행 블록: 실행할 코드를 작성한다

**메소드 선언**
- 메소드 선언은 선언부(리턴 타입, 메소드 이름, 매개 변수 선언)와 실행 블록으로 구성된다

```java
package sec04.exam01;

public class Calculator {
	//메소드
	void powerOn() {
		System.out.println("전원을 켭니다.");
	}
	
	int plus(int x, int y) {
		int result = x + y;
		return result;
	}
	
	double divide(int x, int y) {
		double result = (double)x / (double)y;
		return result;
	}
	
	void powerOff() {
		System.out.println("전원을 끕니다");
	}
}
```

```java
package sec04.exam01;

public class CalculatorExample {
	public static void main(String[] args) {
		Calculator myCalc = new Calculator();
		myCalc.powerOn();
		
		int result1 = myCalc.plus(5, 6);
		System.out.println("result1: " + result1);
		
		byte x = 10;
		byte y = 4;
		double result2 = myCalc.divide(x, y);
		System.out.println("result2: " + result2);
		
		myCalc.powerOff();
	}
}
```

**매개변수의 개수를 모를 경우**
- 메소드의 매개 변수는 개수가 이미 정해져 있는게 일반적이지만 어떤 상황에서는 메소드를 선언할때 매개 변수의 개수를 알 수 없는 경우도 있다
> 해결책은 다음과 같이 매개 변수를 배열 타입으로 선언하는 것이다


```java
package sec04.exam02;

public class Computer {
	int sum1(int[] values) {
		int sum = 0;
		for(int i=0; i<values.length; i++) {
			sum += values[i];
		}
		return sum;
	}
	
	int sum2(int ... values) {
		int sum = 0;
		for(int i=0; i<values.length; i++) {
			sum += values[i];
		}
		return sum;
	}
}
```

```java
package sec04.exam02;

public class ComputerExample {
	public static void main(String[] args) {
		Computer myCom = new Computer();
		
		int[] values1 = {1, 2, 3};
		int result1 = myCom.sum1(values1);
		System.out.println("result1: " + result1);
		
		int result2 = myCom.sum1(new int[] {1, 2, 3, 4, 5});
		System.out.println("result2: " + result2);		
		
		int result3 = myCom.sum2(1, 2, 3);
		System.out.println("result3: " + result3);
		
		int result4 = myCom.sum2(1, 2, 3, 4, 5);
		System.out.println("result4: " + result4);
	}
}
```
**return 문**

-리턴값이 있는 메소드: 리턴 타입이 있는 메소드는 반드시 리턴문을 사용해서 리턴값을 지정해야 한다.
-리턴값이 없는 메소드: void를 사용한다



```java
package sec04.exam03;

public class Car {
	//필드
	int gas;
	
	//생성자
	
	//메소드
	void setGas(int gas) {
		this.gas = gas;
	}
	
	boolean isLeftGas() {
		if(gas==0) {
			System.out.println("gas가 없습니다."); 
			return false;
		}
		System.out.println("gas가 있습니다."); 
		return true;
	}
	
	
	void run() {
		while(true) {
			if(gas > 0) {
				System.out.println("달립니다.(gas잔량:" + gas + ")");
				gas -= 1;
			} else {
				System.out.println("멈춥니다.(gas잔량:" + gas + ")");
				return;
			}
		}
	}
}

```java
package sec04.exam03;

public class CarExample {
	public static void main(String[] args) {
		Car myCar = new Car();
		
		myCar.setGas(5);  //Car의 setGas() 메소드 호출
		
		boolean gasState = myCar.isLeftGas();  //Car의 isLeftGas() 메소드 호출
		if(gasState) {
			System.out.println("출발합니다.");
			myCar.run();  //Car의 run() 메소드 호출
		}
		
		if(myCar.isLeftGas()) {  //Car의 isLeftGas() 메소드 호출
			System.out.println("gas를 주입할 필요가 없습니다.");
		} else {
			System.out.println("gas를 주입하세요.");
		}
	}
}

```

**메소드의 호출**
- 메소드는 클래스의 내 외부의 호출에 의해 실행된다. 
- 클래스 내부의 다른 메소드에서 호출할 경우에는 단순한 메소드 이름으로 호출
- 클래스 외부에서 호출할 경우 클래스로부터 객체를 생성한 뒤 참조 변수를 이용해서 메소드를 호출해야 함

**객체 내부에서 호출**

```java
package sec04.exam04;

public class Calculator {
	//필드
	//생성자
	//메소드
	int plus(int x, int y) {
		int result = x + y;
		return result;
	}
	
	double avg(int x, int y) {
		double sum = plus(x, y);
		double result = sum / 2;
		return result;
	}
	
	void execute() {
		double result = avg(7, 10);
		println("실행결과: " + result);
	}
	
	void println(String message) {
		System.out.println(message);
	}	
}

```
```java
package sec04.exam04;

public class CalculatorExample {
	public static void main(String[] args) {
		Calculator myCalc = new Calculator();
		myCalc.execute();
	}
}
```

**객체 외부에서 호출**
- 외부 클래스에서 메소드를 호출하려면 클래스로부터 객체를 생성해야 한다
- 객체가 생성되었다면 참조 변수와 함께 도트 연산자를 사용해서 메소드를 호출할 수 있다

```java
package sec04.exam05;

public class Car {
	//필드
	int speed;
	
	//생성자
	
	//메소드
	int getSpeed() {
		return speed;
	}
	
	void keyTurnOn() {
		System.out.println("키를 돌립니다.");
	}	
	
	void run() {
		for(int i=10; i<=50; i+=10) {
			speed = i;
			System.out.println("달립니다.(시속:" + speed + "km/h)");
		}
	}	
}
```
```java
package sec04.exam05;

public class CarExample {
	public static void main(String[] args) {
		Car myCar = new Car();
		myCar.keyTurnOn();
		myCar.run();
		int speed = myCar.getSpeed();
		System.out.println("현재 속도: " + speed + "km/h");
	}
}
```

**메소드 오버로딩**
- 클래스 내에 같은 이름의 메소드를 여러 개 선언하는 것
- 메소드 오바로딩의 조건은 매개 변수의 타입, 개수, 순서 중 하나가 달라야 한다는 점

```java
package sec04.exam06;

public class Calculator {
	//정사각형의 넓이
	double areaRectangle(double width) {
		return width * width;
	}
	
	//직사각형의 넓이
	double areaRectangle(double width, double height) {
		return width * height;
	}	
}
```

```java
package sec04.exam06;

public class CalculatorExample {
	public static void main(String[] args) {
		Calculator myCalcu = new Calculator();
		
		//정사각형의 넓이 구하기
		double result1 = myCalcu.areaRectangle(10);

		//직사각형의 넓이 구하기
		double result2 = myCalcu.areaRectangle(10, 20);
		
		//결과 출력
		System.out.println("정사각형 넓이=" + result1);
		System.out.println("직사각형 넓이=" + result2);
	}
}
```
